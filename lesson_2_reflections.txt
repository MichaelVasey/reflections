What happens when you initialize a repository? Why do you need to do it?

Initializing a repository simply creates a git repository that will contain the commit history for the directory

A repository needs to be created so that commits can be recorded, making versions of the directory available for future revisions.

Difference between the staging area and the working directory and repository and the value of the staging area:

The working directory makes available the files currently being worked on or reviewed, ie. the HEAD or a previous commit that has been checked out.

The repository holds the commit history for the project. It is an archive of previous versions.

The staging area is an intermediary between the working directory and the repository. When files are modified and ready to be committed they can be added to the staging area individually and then committed in a single commit. This means that committing changes that affect multiple files can be made in the same commit, so that a logical single updated version is recorded, rather than single commits to individual files which might then need to be synchronised manually to recreate the project as it existed at that point in time.

This process of saving related file changes as a single commit helps rationalise and clarify the commit history.

Situations when branches are helpful in keeping histories organised.

When new experimental features are being worked on, having a separate branch allows for parallel development paths that can be worked on independently.
Some branches might later be merged into the main branch if the feature is succesfully completed.
If the project is live, having branches allows the live version to be maintained and online while experiments and other developments are progressed in isolation until the feature is either finished and accepted or discarded.
This way, the master branch is not made to undergo many revisions and possible reversions that might interrupt its availability (eg a live website) and there's no risk to the master version that a change might break what works.
Alternate branches can be thoroughly tested before merging with the master to add the feature.

Diagrams for visualising branch structure

Diagrams can be drawn to illustrate the branch structure of a repository. These are useful in illustrating where branches begin and the commits that are different between branches and commits that are shared between branches. It can also be useful in identifying or illustrating the concept of unreachable commits - the detached HEAD scenario - that is characterised by unreachable commits.
Commit histories are traced back along branches from each commit to its parent until the initial commit (which is without a parent) is reached.

Merging branches

Merging one branch into another (often the master) combines the commit histories of the two branches so that the single merged branch contains all of the commits from the seperate branches in the order in which they were created.
A merge is performed, for example, when a new feature being developed in its own branch is complete and ready to be added to the live project.

When the branches are combined, the merging branch can be deleted since its commit history is now part of the branch it is merged with and reamin accessible.

On the branch diagram, a merge is represented by a commit node which is the parent of the most recent commits on each of the separate merged nodes.

Automatic and manual merging

Where possible, git will automatically merge branches without having to ask for user input. If however there are merge conflicts, the merge will abort and git will ask the user to resolve the conflict so that the merge can proceed.
The benefit of automatic merging is that the user can let git perform the merge without having to check the files manually unless git flags a conflict.
When a conflict does occur, git identifies the file and the place in the code so that the user can easily see the different versions and choose between them.

